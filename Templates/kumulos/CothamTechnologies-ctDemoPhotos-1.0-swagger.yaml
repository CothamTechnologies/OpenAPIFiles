swagger: '2.0'
info:
  version: "1.0"
  title: 'Demo Photos API'
  description: 'Photo Storage Demo - Kumulos REST API Example, use REST Key as username and anything for password '

host: api.kumulos.com 
basePath: /v1/data

schemes:
  - https
securityDefinitions:
  basicAuth:
    type: basic

# To apply Basic auth to the whole API:
security:
  - basicAuth: []

paths:

  /7068_7803_ctDemoPhotos/:
  
    post:
      summary: create single record in toDoLists Table
      description: Create single record in toDoLists Table
      tags:
        - Photos
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: DummyHeader
          description: Dummy Header param
          type: string
          required: false
          
        - in: body
          name: body
          description: JSON holding data to create
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              longitude:
                type: number
                format: double
              latitude:
                type: number
                format: double
              image:
                type: string
                format: byte
              favourite:
                type: string
           
      responses:
        201:
          description: OK - Returns URL of new record in Location header 
          headers:
            location:
              type: string
              description: URL of new record created
            
        default:
          description: default Error
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
  
    get:
      summary: get photo record all
      description: get photo record all
      tags:
        - Photos
      produces:
        - application/json
      parameters:
        - in: query
          name: page 
          type: integer
          description: The desired page default 1
          required: false
        - in: query
          name: numberPerPage
          type: integer
          description: The desired number of records per page default 50, max 1000
          required: false
          maximum: 1000
        - in: query
          name: sortBy
          type: string
          description: Field name to sort by, prefix - to reverse sort direction
          required: false
          enum:
            - description
            - name
            - -description
            - -name

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                longitude:
                  type: number
                  format: double
                latitude:
                  type: number
                  format: double
                image:
                  type: string
                  format: byte
                favourite:
                  type: string
                ctDemoPhotoID:
                  type: integer
                timeCreated:
                  type: string
                  format: date-time
                timeUpdated:
                  type: string
                  format: date-time
          headers:
            etag:
              type: string
              description: eTag of record
        default:
          description: default Error
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
  
  /7068_7803_ctDemoPhotos/{id}:
    get:
      summary: Return single record from photos Table
      description: Return single record from photos Table
      tags:
        - Photos
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          description: table record id
          required: true

      responses:
        200:
          description: OK
          schema:
            
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              longitude:
                type: number
                format: double
              latitude:
                type: number
                format: double
              image:
                type: string
                format: byte
              favourite:
                type: string
              ctDemoPhotoID:
                type: integer
              timeCreated:
                type: string
                format: date-time
              timeUpdated:
                type: string
                format: date-time
          headers:
            etag:
              type: string
              description: eTag of record

        default:
          description: ERROR
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
    
    delete:
      summary: Delete single record from Photos Table
      description: Delete single record from PhotosTable
      tags:
        - Photos
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          description: table record id
          required: true

      responses:
        201:
          description: 201 No Content will be retuend on success.
        204:
          description: Seems to return 204 on success or failure but doc says 201? 
          
        default:
          description: ERROR
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
          
    put:
      summary: Update single record in Photos Table
      description: Update single record in Photos Table
      tags:
        - Photos
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: integer
          description: table record id
          required: true
        - in: body
          name: body
          description: JSON holding data to update
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              longitude:
                type: number
                format: double
              latitude:
                type: number
                format: double
              image:
                type: string
                format: byte
              favourite:
                type: string
          required: true
           
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              longitude:
                type: number
                format: double
              latitude:
                type: number
                format: double
              image:
                type: string
                format: byte
              favourite:
                type: string
              ctDemoPhotoID:
                type: integer
              timeCreated:
                type: string
                format: date-time
              timeUpdated:
                type: string
                format: date-time
                  
        400:
          description: Bad request
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    
 
        default:
          description: ERROR
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string