---
openapi: 3.0.0
info:
  title: "Api2Pdf - PDF Generation, Powered by Serverless"
  description: |2

    # Introduction
    [Api2Pdf.com](https://www.api2pdf.com) is a powerful REST API for instantly generating PDF and Office documents from HTML, URLs, Microsoft Office Documents (Word, Excel, PPT), Email files, and images. You can generate image preview or thumbnail of a PDF, office document, or email file. The API also supports merge / concatenation of two or more PDFs, setting passwords on PDFs, and adding bookmarks to PDFs. Api2Pdf is a wrapper for popular libraries such as wkhtmltopdf, Headless Chrome, PdfSharp, and LibreOffice.

    # SDKs & Client Libraries
    - Python [https://github.com/Api2Pdf/api2pdf.python](https://github.com/Api2Pdf/api2pdf.python)
    - Node [https://github.com/Api2Pdf/api2pdf.node](https://github.com/Api2Pdf/api2pdf.node)
    - PHP [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php)
    - C# [https://github.com/Api2Pdf/api2pdf.dotnet](https://github.com/Api2Pdf/api2pdf.dotnet)
    - Java [https://github.com/Api2Pdf/api2pdf.java](https://github.com/Api2Pdf/api2pdf.java)
    # Authorization
    Create an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.

    **Authorize your API calls**
    - GET requests, include apikey=YOUR-API-KEY as a query string parameter
    - POST requests, add **Authorization** to your header.
    ``` Authorization: YOUR-API-KEY ```

    # Quickstart
    If you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like:
    ``` https://v2.api2pdf.com/chrome/pdf/url?url={UrlToConvert}&apikey={YourApiKey} ```

    For more advanced usage and settings, see the API specification below.
  contact:
    name: Support
    email: support@api2pdf.com
  license:
    name: Creative Commons
    url: https://creativecommons.org/licenses/by/4.0/legalcode
  version: 2.0.0
externalDocs:
  description: Find out more about Api2Pdf
  url: https://www.api2pdf.com
servers:
  - url: https://v2.api2pdf.com
    description: Api2Pdf.com API
security:
  - HeaderApiKey: []
paths:
  /chrome/pdf/url:
    get:
      tags:
        - Headless Chrome
      summary: Convert URL to PDF
      description: "Convert a URL or Web Page to PDF using Headless Chrome. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/chrome/pdf/url?url={UrlToConvert}&apikey={YourApiKey} ``` "
      operationId: chromePdfFromUrlGET
      parameters:
        - name: url
          in: query
          description: Url of the page to convert to PDF. Must start with http:// or https://.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "302":
          description: Redirected to the resulting URL of the file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
      security:
        - QueryApiKey: []
    post:
      tags:
        - Headless Chrome
      summary: Convert URL to PDF
      description: |-
        Convert a URL or Web Page to PDF using Headless Chrome.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: chromePdfFromUrlPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the web page to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChromeUrlToPdfRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /chrome/pdf/html:
    post:
      tags:
        - Headless Chrome
      summary: Convert raw HTML to PDF
      description: |-
        Convert HTML to a PDF using Headless Chrome w/ Puppeteer
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: chromePdfFromHtmlPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `html` *(string, required)* - raw HTML to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChromeHtmlToPdfRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /chrome/image/url:
    get:
      tags:
        - Headless Chrome
      summary: Convert URL to Image
      description: "Convert a URL or Web Page to Image using Headless Chrome. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/chrome/image/url?url={UrlToConvert}&apikey={YourApiKey} ``` "
      operationId: chromeImageFromUrlGET
      parameters:
        - name: url
          in: query
          description: Url of the page to convert to Image. Must start with http:// or https://.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "302":
          description: Redirected to the resulting URL of the file
          content:
            image/*:
              schema:
                type: string
                format: binary
      security:
        - QueryApiKey: []
    post:
      tags:
        - Headless Chrome
      summary: Convert URL to Image
      description: |-
        Convert a URL or Web Page to PDF using Headless Chrome.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: chromeImageFromUrlPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the web page to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChromeUrlToImageRequest"
      responses:
        "200":
          description: A JSON object containing the url to the Image and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /chrome/image/html:
    post:
      tags:
        - Headless Chrome
      summary: Convert raw HTML to Image
      description: |-
        Convert HTML to a Image using Headless Chrome w/ Puppeteer
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: chromeImageFromHtmlPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `html` *(string, required)* - raw HTML to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChromeHtmlToImageRequest"
      responses:
        "200":
          description: A JSON object containing the url to the Image and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /wkhtml/pdf/url:
    get:
      tags:
        - Wkhtmltopdf
      summary: Convert URL to PDF
      description: "Convert a URL or Web Page to PDF using wkhtmltopdf. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/wkhtml/pdf/url?url={UrlToConvert}&apikey={YourApiKey} ``` "
      operationId: wkhtmlPdfFromUrlGET
      parameters:
        - name: url
          in: query
          description: Url of the page to convert to PDF. Must start with http:// or https://.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "302":
          description: Redirected to the resulting URL of the file
          content:
            application/pdf:
              schema:
                type: string
                format: binary
      security:
        - QueryApiKey: []
    post:
      tags:
        - Wkhtmltopdf
      summary: Convert URL to PDF
      description: |-
        Convert a URL or Web Page to PDF using Wkhtmltopdf
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: wkhtmlPdfFromUrlPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the web page to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `options` *(object, optional)* - Include advanced Wkhtmltopdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).
          - `enableToc` *(boolean, optional)* - Enable table of contents on your pdf by setting enableToc to true.
          - `tocOptions` *(object, optional)* - set enableToc to true and then configure your ToC options add a Table of Contents to the top of your PDF automatically.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WkhtmlUrlToPdfRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /wkhtml/pdf/html:
    post:
      tags:
        - Wkhtmltopdf
      summary: Convert raw HTML to PDF
      description: |-
        Convert HTML to a PDF using Wkhtmltopdf
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: wkhtmlPdfFromHtmlPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `html` *(string, required)* - raw HTML to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `options` *(object, optional)* - Include advanced wkhtmltopdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).
          - `enableToc` *(boolean, optional)* - Enable table of contents on your pdf by setting enableToc to true.
          - `tocOptions` *(object, optional)* - set enableToc to true and then configure your ToC options add a Table of Contents to the top of your PDF automatically.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WkhtmlHtmlToPdfRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /libreoffice/any-to-pdf:
    post:
      tags:
        - LibreOffice
      summary: Convert Office Document or Image File to PDF
      description: |-
        Convert Office Document or Image File to PDF format using LibreOffice
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: libreOfficeAnyToPdfFromPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the file to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibreOfficeAnyToPdfRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /libreoffice/thumbnail:
    post:
      tags:
        - LibreOffice
      summary: Generate an image of the first page of a PDF or Office Document
      description: |-
        This is a great API call if you want to generate an image thumbnail preview of an Office document or PDF file. The output will be a URL to a JPG file.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: libreOfficeThumbnailFromPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the file to convert to PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibreOfficeAnyToPdfRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /libreoffice/pdf-to-html:
    post:
      tags:
        - LibreOffice
      summary: Convert a PDF file to an HTML document
      description: |-
        Convert a PDF file to HTML using LibreOffice. Limitation is that images will be lost.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: libreOfficePdfToHtmlFromPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the file to convert to PDF
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibreOfficePdfToHtmlRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /libreoffice/html-to-docx:
    post:
      tags:
        - LibreOffice
      summary: Generate a Microsoft Word file (.docx) from HTML
      description: |-
        Convert HTML to docx format using LibreOffice
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: libreOfficeHtmlToDocxFromPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the file to convert to PDF
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibreOfficeHtmlToDocxRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /libreoffice/html-to-xlsx:
    post:
      tags:
        - LibreOffice
      summary: Generate a Microsoft Excel document (.xlsx) from HTML
      description: |-
        Convert Html to .xlsx using LibreOffice
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: libreOfficeHtmlToXlsxFromPost
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the file to convert to PDF
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibreOfficeHtmlToXlsxRequest"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /pdfsharp/merge:
    post:
      tags:
        - PdfSharp
      summary: Combine multiple PDF files into a single PDF file
      description: |-
        Combine multiple PDF files into a single PDF file
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: pdfSharpMerge
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `urls` *(list of strings, required)* - List of urls to the PDFs to merge
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PdfSharpMerge"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /pdfsharp/bookmarks:
    post:
      tags:
        - PdfSharp
      summary: Add bookmarks to an existing PDF
      description: |-
        Add bookmarks to an existing PDF
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: pdfSharpBookmarks
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the PDF
          - `bookmarks` *(array, required)* - Array of objects with title and page number attributes where page number is zero-indexed (0 is first page)
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PdfSharpBookmarks"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /pdfsharp/password:
    post:
      tags:
        - PdfSharp
      summary: Add a password to an existing PDF
      description: |-
        Add a password to an existing PDF
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: pdfSharpPassword
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the PDF
          - `userpassword` *(string, required)* - User password to set to lock down pdf
          - `ownerpassword` *(string, optional)* - Owner password to set on pdf
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PdfSharpPassword"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /pdfsharp/extract-pages:
    post:
      tags:
        - PdfSharp
      summary: Extract pages out of a PDF
      description: |-
        Extract pages out of an existing PDF
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: pdfSharpExtractPages
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the PDF
          - `start` *(integer, optional)* - Start the range of the PDF to extract, indexed to 0, defaults to the first page of the PDF. Can be negative, meaning -1 would start as the last page of the PDF
          - `end` *(integer, optional)* - End the range of the PDF to extract, indexed to 0, defaults to the last page of the PDF, can be negative.
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PdfSharpExtractPages"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /pdfsharp/compress:
    post:
      tags:
        - PdfSharp
      summary: Compress the file size of an existing PDF
      description: |-
        Compress the file size of an existing PDF
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: pdfSharpCompress
      requestBody:
        description: |-
          A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:
          - `url` *(string, required)* - Url to the PDF
          - `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.
          - `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.
          - `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.
          - `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PdfSharpCompress"
      responses:
        "200":
          description: A JSON object containing the url to the PDF and other meta data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /zebra:
    get:
      tags:
        - ZXING (Zebra Crossing) Bar Codes
      summary: Generate bar codes and QR codes with ZXING.
      description: "See full list of options and documentation [here](https://www.api2pdf.com/documentation/advanced-options-zxing-zebra-crossing-barcodes/)\n### Authorize via Query String Parameter\n**apikey=YOUR-API-KEY**\n### Example\n``` https://v2.api2pdf.com/zebra?format={format}&apikey={YourApiKey}&value={YourText} ``` "
      operationId: zebraGET
      parameters:
        - name: format
          in: query
          description: Most common is CODE_39 or QR_CODE
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: value
          in: query
          description: Specify the text value you want to convert
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: showlabel
          in: query
          description: Show label of text below barcode
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: height
          in: query
          description: Height of the barcode generated image
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: width
          in: query
          description: Width of the barcode generated image
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: An image of the generated barcode or QR code
          content:
            image/png:
              schema:
                type: string
                format: binary
      security:
        - QueryApiKey: []
  /file/{responseId}:
    delete:
      tags:
        - Utility Commands
      summary: Delete a file on command
      description: |-
        Delete a file on command instead of waiting 24 hours for self-delete. Make a DELETE call to /file/{responseId} where {responseId} is from the JSON object returned from the original call to generate the file.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: fileDELETE
      parameters:
        - name: responseId
          in: path
          description: Guid from responseId of initial API call
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: A JSON object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseSuccess"
  /zip:
    post:
      tags:
        - Utility Commands
      summary: Create a .zip file from multiple files
      description: |-
        Pass in a list of urls to existing files along with desired file names and paths to subdirectories. This method will ingest those files and create a .zip and return the .zip in binary form in the response.
        ### Authorize via Header of Request
        **Authorization: YOUR-API-KEY**
      operationId: filesZip
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UtilityZipAllFiles"
      responses:
        "200":
          description: Binary zip file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /status:
    get:
      tags:
        - Utility Commands
      summary: Call this to check the health of the API
      description: "Returns a status 200, no authentication required."
      operationId: statusCheck
      responses:
        "200":
          description: Returns a 200 OK
  /balance:
    get:
      tags:
        - Utility Commands
      summary: Call this to check the balance remaining on your account
      description: |-
        Returns your balance in JSON response
        ### Authorize via Query String Parameter
        **apikey=YOUR-API-KEY**
        ### Example
        ``` https://v2.api2pdf.com/balance?apikey={YourApiKey} ```
      operationId: balanceCheck
      responses:
        "200":
          description: Returns a 200 OK if balance is above 0
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceCheckSuccess"
components:
  schemas:
    ApiResponseSuccess:
      type: object
      properties:
        FileUrl:
          type: string
          description: A url to the PDF that will exist only for 24 hours
          example: https://link-to-your-file
        MbOut:
          type: number
          description: The amount of megabytes of bandwidth generated from the resulting pdf
          example: 0.73327
        Cost:
          type: number
          description: Cost of the operation (mbIn + mbOut) * $.001
          example: 0.0007979
        Success:
          type: boolean
          description: Will be true if the operation suceeded
          example: true
        ResponseId:
          type: string
          description: Identifier of the API call for reference later if needed
          example: 0cdfdb27-dcc0-413e-a713-b9371b2e2678
        Seconds:
          type: number
          description: "The length of time, in seconds of how long the operation took."
          example: 4
        Error:
          type: string
          description: Explanation if operation failed
    BalanceCheckSuccess:
      type: object
      properties:
        UserBalance:
          type: number
          example: 12.76
    ChromeUrlToPdfRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://www.github.com
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        options:
          $ref: "#/components/schemas/ChromeAdvancedPdfOptions"
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    ChromeUrlToImageRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://www.github.com
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.png
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        options:
          $ref: "#/components/schemas/ChromeAdvancedImageOptions"
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    ChromeHtmlToPdfRequest:
      required:
        - html
      type: object
      properties:
        html:
          type: string
          format: html
          example: <p>Hello World</p>
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        options:
          $ref: "#/components/schemas/ChromeAdvancedPdfOptions"
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    ChromeHtmlToImageRequest:
      required:
        - html
      type: object
      properties:
        html:
          type: string
          format: html
          example: <p>Hello World</p>
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.png
        options:
          $ref: "#/components/schemas/ChromeAdvancedImageOptions"
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    ChromeAdvancedPdfOptions:
      type: object
      properties:
        delay:
          type: number
          description: How long to wait (in milliseconds) for the page to render before taking the snapshot
          example: 0
        puppeteerWaitForMethod:
          type: string
          example: WaitForNavigation
        puppeteerWaitForValue:
          type: string
          example: Load
        usePrintCss:
          type: boolean
          example: true
        landscape:
          type: boolean
          example: false
        printBackground:
          type: boolean
          example: true
        displayHeaderFooter:
          type: boolean
          example: false
        headerTemplate:
          type: string
          example: <span></span>
        footerTemplate:
          type: string
          example: <span></span>
        width:
          type: string
          example: 8.27in
        height:
          type: string
          example: 11.69in
        marginTop:
          type: string
          example: .4in
        marginBottom:
          type: string
          example: .4in
        marginLeft:
          type: string
          example: .4in
        marginRight:
          type: string
          example: .4in
        pageRanges:
          type: string
          example: 1-10000
        scale:
          type: number
          example: 1
        omitBackground:
          type: boolean
          example: false
    ChromeAdvancedImageOptions:
      type: object
      properties:
        delay:
          type: number
          description: How long to wait (in milliseconds) for the page to render before taking the snapshot
          example: 0
        puppeteerWaitForMethod:
          type: string
          example: WaitForNavigation
        puppeteerWaitForValue:
          type: string
          example: Load
        fullPage:
          type: boolean
          example: true
        viewPortOptions:
          $ref: "#/components/schemas/ViewPortOptions"
    ViewPortOptions:
      type: object
      properties:
        width:
          type: integer
          example: 1920
        height:
          type: integer
          example: 1080
    FileStorageOptions:
      type: object
      properties:
        method:
          type: string
          example: PUT
        url:
          type: string
          description: This should be a url that we should upload the file to. An example is a presigned Amazon S3 url
          example: https://presignedurl
        extraHTTPHeaders:
          type: object
          description: A key-value object for specifying headers in a request to the URL.
    WkhtmlUrlToPdfRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://www.github.com
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        options:
          $ref: "#/components/schemas/WkhtmlAdvancedOptions"
        enableToc:
          type: boolean
          example: false
        tocOptions:
          $ref: "#/components/schemas/WkhtmlTocOptions"
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    WkhtmlHtmlToPdfRequest:
      required:
        - url
      type: object
      properties:
        html:
          type: string
          example: <p>Hello World</p>
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        options:
          $ref: "#/components/schemas/WkhtmlAdvancedOptions"
        enableToc:
          type: boolean
          example: false
        tocOptions:
          $ref: "#/components/schemas/WkhtmlTocOptions"
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    WkhtmlAdvancedOptions:
      type: object
      properties:
        orientation:
          type: string
          description: Change to Landscape to go into landscape mode
          example: Portrait
        pageSize:
          type: string
          example: A4
    WkhtmlTocOptions:
      type: object
      properties:
        tocHeaderText:
          type: string
          example: Lorem Ipsum
        tocLevelIndentation:
          type: string
          example: 1em
    LibreOfficeAnyToPdfRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://www.api2pdf.com/wp-content/themes/api2pdf/assets/samples/sample-word-doc.docx
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    LibreOfficePdfToHtmlRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://your-url-to-pdf-file
        fileName:
          type: string
          example: test.html
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    LibreOfficeHtmlToDocxRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://your-url-to-html-file
        fileName:
          type: string
          example: test.docx
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    LibreOfficeHtmlToXlsxRequest:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://your-url-to-html-file
        fileName:
          type: string
          example: test.xlsx
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    PdfSharpMerge:
      required:
        - urls
      type: object
      properties:
        urls:
          type: array
          example:
            - https://link-to-your-pdf-1.pdf
            - https://link-to-your-pdf-2.pdf
          items:
            type: string
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    PdfSharpBookmarks:
      required:
        - bookmarks
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://link-to-your-pdf-1.pdf
        bookmarks:
          type: array
          items:
            $ref: "#/components/schemas/PdfSharpBookmarks_bookmarks"
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    PdfSharpPassword:
      required:
        - url
        - userpassword
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://link-to-your-pdf-1.pdf
        userpassword:
          type: string
          example: your-password
        ownerpassword:
          type: string
          example: your-password
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    PdfSharpExtractPages:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://link-to-your-pdf-1.pdf
        start:
          type: number
          example: 0
        end:
          type: number
          example: 3
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    PdfSharpCompress:
      required:
        - url
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://link-to-your-pdf-1.pdf
        inline:
          type: boolean
          example: true
        fileName:
          type: string
          example: test.pdf
        extraHTTPHeaders:
          type: object
          description: A key-value pair (dictionary) for setting headers on a request to a URL.
        useCustomStorage:
          type: boolean
          example: false
        storage:
          $ref: "#/components/schemas/FileStorageOptions"
    UtilityZipAllFiles:
      required:
        - files
      type: object
      properties:
        files:
          type: array
          items:
            $ref: "#/components/schemas/UtilityZipAllFiles_files"
    PdfSharpBookmarks_bookmarks:
      type: object
      properties:
        title:
          type: string
        page:
          type: integer
    UtilityZipAllFiles_files:
      type: object
      properties:
        url:
          type: string
          format: url
        fileName:
          type: string
          description: Can be a path including subfolder in name
  securitySchemes:
    HeaderApiKey:
      type: apiKey
      name: Authorization
      in: header
    QueryApiKey:
      type: apiKey
      name: apikey
      in: query
